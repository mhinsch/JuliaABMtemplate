using Random
using BenchmarkTools

push!(LOAD_PATH, "./src")

# actually import the module
using SimpleAgentEvents

# all possible states a person can be in
@enum Status susceptible infected recovered

# this is our agent type
mutable struct Person
    # state
    status :: Status
    # other agents this one can infect or be infected by
    contacts :: Vector{Person}
end

# how we construct a person object
Person() = Person(susceptible, [])
Person(state) = Person(state, [])

mutable struct Simulation
    # and this is our population of agents
    pop :: Vector{Person}
end

# usage:
# processes NAME SIMULATION AGENT ACTIONS
@processes SI sim person::Person begin
 
    # recovery
    @poisson(1e-3)  ~
        person.status == infected           => 
            begin
                person.status = recovered
                [person; person.contacts]
            end

    # infection with rate proportional to prop. infected contacts
    @poisson(count(p -> p.status == infected, person.contacts)) ~
        # a person has to be susceptible in order to get infected
        person.status == susceptible        => 
            begin
                # status changes
                person.status = infected
                [person; person.contacts]
            end

	@poisson(1e-2) ~
		person.status == infected =>
		begin
			person.status = recovered
			[person; person.contacts]
		end

	@poisson(1e-4) ~
		person.status == recovered		=>
			begin
				person.status = susceptible
				[person]
			end
	

	@poisson(1e-6) ~
		person.status == susceptible =>
			begin
				person.status = infected
				[person; person.contacts]
			end
end

# and this is the entire model

function setup_grid(constr, xs, ys)
	# construct the population (contactless for now)
	pop = [ constr(susceptible) for i in 1:xs*ys ]

	# make a matrix to simplify finding neighbours
	matrix = reshape(pop, ys, :)

	for x in 1:xs, y in 1:ys
		p = matrix[y, x]
		if x > 1
			push!(p.contacts, matrix[y, x-1])
		end
		if y > 1
			push!(p.contacts, matrix[y-1, x])
		end
		if x < xs
			push!(p.contacts, matrix[y, x+1])
		end
		if y < ys
			push!(p.contacts, matrix[y+1, x])
		end
	end

	pop
end

function spawn(sim)
    # spawn activates agents
    # this function was generated by the model declaration
    for person in sim.pop
        SI.spawn(person, sim)
    end
end

function setup_sim(;xs, ys, seed)
    # for reproducibility
    Random.seed!(seed)
 
    pop = setup_grid(Person, xs, ys)

    # create a simulation object with parameter values
    sim = Simulation(pop)
    
	sim.pop[1, 1].status = infected

	SI.reset!()
	spawn(sim)

	SI.upto!(10000.0)

    sim
end


function run_sim(n_steps)

	for i in 1:n_steps
        SI.next!()
    end
end


function run_bench()
	i = 1
	for grid_size in [2, 4, 8, 16, 32, 64, 128, 256, 512]
		println("grid size: ", grid_size)
		@btime run_sim(1000) setup = (setup_sim(xs=$grid_size, ys=$grid_size, seed=$i))
		i += 1
	end
end


run_bench()

